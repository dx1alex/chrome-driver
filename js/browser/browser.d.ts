export * from './base';
import { UnicodeKeys } from "../helpers";
import { Base, BrowserOptions, Selector, Timeouts, WebdriverOptions, PauseSettings } from "./base";
import { Exec } from './exec';
import { Elements } from './elements';
import { State } from "./state";
import { Navigate } from './navigate';
import { Alert } from "./alert";
import { Tabs } from './tabs';
import { Cookies } from './cookies';
import { Frames } from './frames';
import { Getter } from './getter';
import { Input } from './input';
import { Mouse } from './mouse';
import { Storage } from './storage';
import { Utils } from './utils';
import { Sessions } from './sessions';
import { Screenshot } from './screenshot';
import { Scroll } from './scroll';
export declare class Browser extends Base {
    protected static _$List: string[];
    protected static _noProxyList: string[];
    protected static _noCommandHistoryList: string[];
    protected static DEFAULT_WAIT_TIMEOUT: number;
    protected static DEFAULT_WAIT_INTERVAL: number;
    protected static MAX_COMMAND_HISTORY_ITEMS: number;
    static KEY: {
        null: string;
        cancel: string;
        help: string;
        back_space: string;
        backspace: string;
        tab: string;
        clear: string;
        return: string;
        enter: string;
        shift: string;
        control: string;
        ctrl: string;
        alt: string;
        pause: string;
        escape: string;
        space: string;
        pageup: string;
        page_up: string;
        pagedown: string;
        page_down: string;
        end: string;
        home: string;
        left_arrow: string;
        arrow_left: string;
        leftarrow: string;
        arrowleft: string;
        up_arrow: string;
        arrow_up: string;
        uparrow: string;
        arrowup: string;
        right_arrow: string;
        arrow_right: string;
        rightarrow: string;
        arrowright: string;
        down_arrow: string;
        arrow_down: string;
        downarrow: string;
        arrowdown: string;
        insert: string;
        delete: string;
        semicolon: string;
        equals: string;
        numpad_0: string;
        numpad_1: string;
        numpad_2: string;
        numpad_3: string;
        numpad_4: string;
        numpad_5: string;
        numpad_6: string;
        numpad_7: string;
        numpad_8: string;
        numpad_9: string;
        numpad0: string;
        numpad1: string;
        numpad2: string;
        numpad3: string;
        numpad4: string;
        numpad5: string;
        numpad6: string;
        numpad7: string;
        numpad8: string;
        numpad9: string;
        multiply: string;
        add: string;
        separator: string;
        subtract: string;
        decimal: string;
        divide: string;
        f1: string;
        f2: string;
        f3: string;
        f4: string;
        f5: string;
        f6: string;
        f7: string;
        f8: string;
        f9: string;
        f10: string;
        f11: string;
        f12: string;
        command: string;
        meta: string;
    };
    private _lastError;
    commandHistory: any[];
    constructor(wd_options: WebdriverOptions, options?: BrowserOptions);
    protected readonly _: this;
    getStatus(): Promise<any>;
    setTimeouts(timeouts: Timeouts): Promise<void>;
    quit(): Promise<void>;
    start(options?: BrowserOptions): Promise<void>;
    $(selector: Selector): Browser$;
    getCommandHistory(endItems?: number): any[];
    getCommandHistoryErrors(endItems?: number): any[];
    lastError(err?: any): any;
    pause(action: keyof PauseSettings, value: number): void;
    pause(options: PauseSettings): void;
    dump(): void;
    proxy(): void;
}
export interface Browser extends Scroll, Screenshot, Sessions, Utils, Storage, Mouse, Input, Getter, Frames, Cookies, Tabs, Alert, Navigate, Exec, Elements, State {
}
export interface Browser$ {
    script(code: string | Function, ...args: any[]): Promise<any>;
    scriptAll(code: string | Function, ...args: any[]): Promise<any>;
    scriptAllAsync(code: string | Function, ...args: any[]): Promise<any>;
    scriptAsync(code: string | Function, ...args: any[]): Promise<any>;
    html(): Promise<string>;
    text(): Promise<string>;
    tagName(): Promise<string>;
    attr(attr: string): Promise<string>;
    prop(prop: string): Promise<string>;
    css(propertyName: string): Promise<string>;
    classList(): Promise<string[]>;
    size(): Promise<{
        width: number;
        height: number;
    }>;
    location(): Promise<{
        x: number;
        y: number;
    }>;
    locationInView(): Promise<{
        x: number;
        y: number;
    }>;
    keys(...keys: Array<number | boolean | string | Array<UnicodeKeys>>): Promise<void>;
    type(...keys: Array<number | boolean | string | Array<UnicodeKeys>>): Promise<void>;
    clear(): Promise<void>;
    empty(): Promise<void>;
    submit(pause?: number): Promise<void>;
    check(pause?: number): Promise<boolean>;
    uncheck(pause?: number): Promise<boolean>;
    uploadFile(input_file: Selector, filePath: string, pause?: number): Promise<void>;
    select(select: Selector, option: object | number | string, submit?: boolean | number, pause?: number | boolean): Promise<void>;
    unselect(select: Selector, option: object | number | string, submit?: boolean | number, pause?: number | boolean): Promise<void>;
    form(form: Selector, inputs: any, ...submitAndPause: (boolean | number)[]): Promise<void>;
    click(pause?: number): Promise<void>;
    mouseMoveTo(xoffset?: number, yoffset?: number, pause?: number): Promise<void>;
    mouseClickTo(xoffset?: number, yoffset?: number): Promise<void>;
    isExists(): Promise<boolean>;
    isSelected(): Promise<boolean>;
    isEnabled(): Promise<boolean>;
    isFocused(): Promise<boolean>;
    isReadonly(): Promise<boolean>;
    isVisible(): Promise<boolean>;
    hasText(text: string | RegExp): Promise<boolean>;
    hasClass(name: string): Promise<boolean>;
    hasAttribute(attr: string): Promise<boolean>;
}
